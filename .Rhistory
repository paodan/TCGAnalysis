tempdir()
tempfile()
basename(tempfile())
tmpDir = basename(tempdir())
tmpDir
tmpDir
desDir = basename(tempdir())
message("Destination directory is ./", desDir)
message("Files are downloaded in ./", desDir, " directory")
message("Files are downloaded in:\n./", desDir)
sessionInfo()
x = sessionInfo()
x$platform
x$running
si = sessionInfo()
si$running
strsplit(si$running, " ")
strsplit(si$running, " ")[[1]]
strsplit(si$running, " ")[[1]][1]
os = strsplit(si$running, " ")[[1]][1]
?switch
gdcClientURL = "https://gdc.cancer.gov/files/public/file/gdc-client_v1.6.1_OSX_x64.zip"
gdcClientURL
system.file(package = "ggplot2")
system.file(package = "ggplot2", "inst/extdata/")
system.file(package = "ggplot2", lib.loc = "inst/extdata/")
system.file("inst/extdata/", package = "ggplot2")
system.file("inst/extdata/", package = "RegEnrich")
system.file("inst/extdata/", package = "RegEnrich", mustWork = )
system.file("inst/extdata/", package = "RegEnrich", mustWork = T)
?system.file
system.file("help", "AnIndex", package = "splines")
system.file("INDEX")
system.file("inst", "extdata/", package = "RegEnrich", mustWork = T)
system.file("inst", "extdata/", package = "RegEnrich")
system.file("inst", "extdata/", package = "ggplot2")
system.file("ggplot2")
system.file(package = "ggplot2")
desDir = system.file("doc", package = "ggplot2")
desDir
gdcClientURL
download.file(gdcClientURL, destfile = desDir)
# desDir = system.file("doc", package = "ggplot2")
download.file(gdcClientURL, destfile = "./")
# desDir = system.file("doc", package = "ggplot2")
download.file(gdcClientURL, destfile = "./gdc-client")
desDir = system.file("doc", package = "ggplot2")
desDir
desDir
download.file(gdcClientURL, destfile = desDir)
file.path(desDir, "gdc-client")
download.file(gdcClientURL, destfile = file.path(desDir, "gdc-client"))
system.file("inst", "extdata", package = "TCGAnalysis")
desFile
desFile = "./gdc-client"
desFile
desFile
?options
desFile
options(gdcClientPath = desFile)
options(gdcClientPath)
options(gdcClientPath = desFile)
options()
options()$gdcClientPath
options(gdcClientPath = desFile)
x = options(gdcClientPath = desFile)
x
options()[gdcClientPath ] = NULL
options(gdcClientPath = NULL)
options()$gdcClientPath
options()$gdcClientPath23
x = options(gdcClientPath = desFile)
x
installTools = function(gdcClientURL = "https://gdc.cancer.gov/files/public/file/gdc-client_v1.6.1_OSX_x64.zip"){
si = sessionInfo()
os = strsplit(si$running, " ")[[1]][1]
cat("Downloading gdc-client\n")
# desDir = system.file("doc", package = "ggplot2")
desFile = file.path(system.file("inst", "extdata", package = "TCGAnalysis"), "gdc-client")
desFile = normalizePath(desFile)
download.file(gdcClientURL, destfile = desFile)
options(gdcClientPath = desFile)
cat("The full path of gdc-client is: ", desFile, "\nIt is stored in options()$gdcClientPath")
return(invisible(options()$gdcClientPath))
}
installed.packages()
x = installed.packages()
class(x)
class(x)[,1]
(x)[,1]
(x[,1] == "TCGAnalysis")
sum(x[,1] == "TCGAnalysis")
(sum(x[,1] == "TCGAnalysis") == 1)
# desDir = system.file("doc", package = "ggplot2")
if(sum(x[,1] == "TCGAnalysis") == 1){
desFile = file.path(system.file("inst", "extdata", package = "TCGAnalysis"), "gdc-client")
} else {
desFile = "./gdc-client"
}
desFile
desFile = normalizePath(desFile)
desFile
file.exists(desFile)
message("gdc-client exists in ", desFile, ", so ")
installTools = function(gdcClientURL = "https://gdc.cancer.gov/files/public/file/gdc-client_v1.6.1_OSX_x64.zip"){
si = sessionInfo()
os = strsplit(si$running, " ")[[1]][1]
# desDir = system.file("doc", package = "ggplot2")
if(sum(x[,1] == "TCGAnalysis") == 1){
desFile = file.path(system.file("inst", "extdata", package = "TCGAnalysis"), "gdc-client")
} else {
desFile = "./gdc-client"
}
desFile = normalizePath(desFile)
if(file.exists(desFile)){
message("gdc-client exists in ", desFile, ", so ")
} else {
cat("Downloading gdc-client\n")
download.file(gdcClientURL, destfile = desFile)
}
options(gdcClientPath = desFile)
cat("The full path of gdc-client is: ", desFile, "\nIt is stored in options()$gdcClientPath")
return(invisible(options()$gdcClientPath))
}
installTools()
installTools()
installTools = function(gdcClientURL = "https://gdc.cancer.gov/files/public/file/gdc-client_v1.6.1_OSX_x64.zip"){
si = sessionInfo()
os = strsplit(si$running, " ")[[1]][1]
# desDir = system.file("doc", package = "ggplot2")
if(sum(x[,1] == "TCGAnalysis") == 1){
desFile = file.path(system.file("inst", "extdata", package = "TCGAnalysis"), "gdc-client")
} else {
desFile = "./gdc-client"
}
desFile = normalizePath(desFile)
if(file.exists(desFile)){
message("gdc-client exists in ", desFile)
} else {
cat("Downloading gdc-client\n")
download.file(gdcClientURL, destfile = desFile)
}
options(gdcClientPath = desFile)
cat("The full path of gdc-client is:", desFile, "\nIt is stored in options()$gdcClientPath")
return(invisible(options()$gdcClientPath))
}
installTools()
options()$gdcClientPath
options(gdcClientPath = NULL)
options()$gdcClientPath
installTools()
options()$gdcClientPath
desDir
desDir = NULL
if(is.null(desDir)){
desDir = basename(tempdir())
message("Files are downloaded in:\n./", desDir)
}
desDir
dir.create(desDir)
manifest = "inst/extdata/gdc_manifest_LUAD_expr_5.txt"
options()$gdcClientPath
#' Obtain the gdc-client tool path
#' @return the gdc-clent path
#' @examples
#' \dontrun{
#' getGdcClient()
#' }
getGdcClient = function(){
options()$gdcClientPath
}
package = "TCGAnalysis")
package = "TCGAnalysis")
mnf = system.file("inst", "extdata", "gdc_manifest_LUAD_expr_5.txt",
package = "TCGAnalysis")
mnf
manifest
downloadByManifest(manifest)
downloadByManifest = function(manifest, desDir = NULL){
if(is.null(desDir)){
desDir = basename(tempdir())
dir.create(desDir)
message("Files are downloaded in:\n./", desDir)
}
gdcPath = getGdcClient()
cmd = paste(gdcPath, "-m", manifest, "-d", desDir)
system(cmd, wait = T)
return(invisible(desDir))
}
downloadByManifest(manifest)
downloadByManifest = function(manifest, desDir = NULL){
if(is.null(desDir)){
desDir = basename(tempdir())
dir.create(desDir)
message("Files are downloaded in:\n./", desDir)
}
gdcPath = getGdcClient()
cmd = paste(gdcPath, "-m", manifest, "-d", desDir)
message(cmd)
system(cmd, wait = T)
return(invisible(desDir))
}
downloadByManifest()
downloadByManifest(manifest)
downloadByManifest = function(manifest, desDir = NULL){
if(is.null(desDir)){
desDir = basename(tempdir())
dir.create(desDir, showWarnings = F)
message("Files are downloaded in:\n./", desDir)
}
gdcPath = getGdcClient()
cmd = paste(gdcPath, "-m", manifest, "-d", desDir)
message(cmd)
system(cmd, wait = T)
return(invisible(desDir))
}
downloadByManifest(manifest)
downloadByManifest = function(manifest, desDir = NULL){
if(is.null(desDir)){
desDir = basename(tempdir())
dir.create(desDir, showWarnings = F)
message("Files are downloaded in:\n./", desDir)
}
gdcPath = getGdcClient()
cmd = paste(gdcPath, "download -m", manifest, "-d", desDir)
message(cmd)
system(cmd, wait = T)
return(invisible(desDir))
}
downloadByManifest(manifest)
installTools()
options()$gdcClientPath
normalizePath(desFile)
#' # By default install gdc-client of macOS version
#' installTools()
#'
#' # Install gdc-client of Linux (Ubuntu) version
#' installTools("https://gdc.cancer.gov/files/public/file/gdc-client_v1.6.1_Ubuntu_x64.zip")
#'
#' # Install gdc-client of Windows version
#' installTools("https://gdc.cancer.gov/files/public/file/gdc-client_v1.6.1_Windows_x64.zip")
#' }
#' @export
installTools = function(gdcClientURL = "https://gdc.cancer.gov/files/public/file/gdc-client_v1.6.1_OSX_x64.zip"){
si = sessionInfo()
os = strsplit(si$running, " ")[[1]][1]
# desDir = system.file("doc", package = "ggplot2")
if(sum(x[,1] == "TCGAnalysis") == 1){
desFile = file.path(system.file("inst", "extdata", package = "TCGAnalysis"), "gdc-client")
} else {
desFile = "./gdc-client"
}
if(file.exists(desFile)){
message("gdc-client exists in ", desFile)
} else {
cat("Downloading gdc-client\n")
download.file(gdcClientURL, destfile = desFile)
}
desFile = normalizePath(desFile)
options(gdcClientPath = desFile)
cat("The full path of gdc-client is:", desFile, "\nIt is stored in options()$gdcClientPath")
return(invisible(options()$gdcClientPath))
}
desFile = normalizePath(desFile)
options(gdcClientPath = desFile)
cat("The full path of gdc-client is:", desFile, "\nIt is stored in options()$gdcClientPath")
desFile
unz(desFile)
unz(filename = desFile)
?unz
unz(paste0(desFile, ".zip"))
unz(paste0(desFile, ".zip"))
desFile, ".zip"
paste0(desFile, ".zip")
unz(desFile, paste0(desFile, ".zip"))
desFile
unzip(paste0(desFile, ".zip"))
downloadByManifest(manifest)
desFile
unzip(paste0(desFile, ".zip"))
downloadByManifest(manifest)
desDir = basename(tempdir())
dir.create(desDir, showWarnings = F)
desDir
normalizePath(desDir)
normalizePath("./asdf")
normalizePath("./asdf", mustWork = F)
normalizePath("./asdf", mustWork = T)
if(is.null(desDir)){
desDir = basename(tempdir())
dir.create(desDir, showWarnings = F)
desDir = normalizePath(desDir)
message("Files are downloaded in:\n", desDir)
}
desDir
desDir = basename(tempdir())
dir.create(desDir, showWarnings = F)
desDir = normalizePath(desDir)
message("Files are downloaded in:\n", desDir)
downloadFiles = /Users/paodan/GitHub/TCGAnalysis/RtmpI9X5wD
downloadFiles = "/Users/paodan/GitHub/TCGAnalysis/RtmpI9X5wD"
downloadFolder = downloadFiles
downloadFolder
list.files(downloadFolder)
dir(downloadFolder)
dir(downloadFolder, full.names = T)
dir(downloadFolder, full.names = T, recursive = T)
dir(downloadFolder, full.names = T, recursive = T)
files = dir(downloadFolder, full.names = T, recursive = T)
files
files0 = dir(downloadFolder, full.names = T, recursive = T)
files = grep(paste0(dataType, ".gz$", files0))
files = grep(paste0(dataType, ".gz$"), files0)
dataType = "htseq.count"
files = grep(paste0(dataType, ".gz$"), files0)
files
paste0(dataType, ".gz$")
files = grep("*",paste0(dataType, ".gz$"), files0)
files
files = grep("*",paste0(dataType, ".gz$"), files0, value = T)
files
files0 = dir(downloadFolder, full.names = T, recursive = T)
files0
files = grep(paste0("*",dataType, ".gz$"), files0, value = T)
files
paste0("*",dataType, ".gz$")
dataType = "htseq.counts"
files = grep(paste0("*",dataType, ".gz$"), files0, value = T)
files
read.table("/Users/paodan/GitHub/TCGAnalysis/RtmpI9X5wD/6f1d55c9-b791-49a3-b664-db126f812872/annotations.txt")
read.table("/Users/paodan/GitHub/TCGAnalysis/RtmpI9X5wD/6f1d55c9-b791-49a3-b664-db126f812872/annotations.txt", sep = "%")
read.table("/Users/paodan/GitHub/TCGAnalysis/RtmpI9X5wD/6f1d55c9-b791-49a3-b664-db126f812872/annotations.txt", sep = "\t")
files
library(data.table)
y = lapply(files, function(x){
data.table::fread(x)
})
y
tmp = read.csv(files[1])
head(tmp)
tmp = read.csv(files[1], header = F)
head(tmp)
tmp = read.csv(files[1], header = F, sep = "\t")
head(tmp)
z = lapply(y[-1], function(x){
dplyr::left_join(y[[-1]], x, by = "V1")
})
z = lapply(y[-1], function(x){
dplyr::left_join(y[[1]], x, by = "V1")
})
z
z = y[[1]]
for(mi in seq_alongy[-1]){
z = dplyr::left_join(z, y[[mi]], by = "V1")
}
z = y[[1]]
z
for(mi in seq_along(y)[-1]){
z = dplyr::left_join(z, y[[mi]], by = "V1")
}
z
#' Read data downloaded from TCGA GDC repository
#' @import data.table
#' @import dplyr
readTCGA = function(downloadFolder, dataType = "htseq.counts"){
files0 = dir(downloadFolder, full.names = T, recursive = T)
files = grep(paste0("*",dataType, ".gz$"), files0, value = T)
y = lapply(files, function(x){
data.table::fread(x)
})
z = y[[1]]
for(mi in seq_along(y)[-1]){
z = dplyr::left_join(z, y[[mi]], by = "V1")
}
}
dim(z)
tail(z)
z1 = head(z, -5)
dim(z1)
tail(z)
tail(z1)
files
basename(files)
gsub("\.htseq\.counts\.gz", "", basename(files))
gsub("\\.htseq\\.counts\\.gz", "", basename(files))
sampleIDs = gsub("\\.htseq\\.counts\\.gz", "", basename(files))
sampleIDs
colnames(z) = c("Gene", sampleIDs)
head(z)
z = as.data.frame(z)
head(z)
files
?switch
#' Read htseq.counts data
#'
#' @import data.table
#' @import dplyr
read_htseqCounts = function(files, remove_last = TRUE){
y = lapply(files, function(x){
data.table::fread(x)
})
z = y[[1]]
for(mi in seq_along(y)[-1]){
z = dplyr::left_join(z, y[[mi]], by = "V1")
}
if(remove_last){
z = head(z, -5)
}
sampleIDs = gsub("\\.htseq\\.counts\\.gz", "", basename(files))
colnames(z) = c("Gene", sampleIDs)
z = as.data.frame(z)
return(z)
}
#' Read data downloaded from TCGA GDC repository
#' @import data.table
#' @import dplyr
readTCGA = function(downloadFolder, dataType = "htseq.counts", ...){
args = list(...)
if("remove_last" %in% names(args)) {
remove_last = args$remove_last
stopifnot(is.logical(remove_last))
}
files0 = dir(downloadFolder, full.names = T, recursive = T)
files = grep(paste0("*",dataType, ".gz$"), files0, value = T)
data = switch(dataType,
htseq.counts = read_htseqCounts(files, remove_last))
return(data)
}
x = readTCGA("./RtmpI9X5wD/")
#' Read data downloaded from TCGA GDC repository
#' @import data.table
#' @import dplyr
readTCGA = function(downloadFolder, dataType = "htseq.counts", ...){
args = list(...)
if("remove_last" %in% names(args)) {
remove_last = args$remove_last
stopifnot(is.logical(remove_last))
} else {
remove_last = TRUE
}
files0 = dir(downloadFolder, full.names = T, recursive = T)
files = grep(paste0("*",dataType, ".gz$"), files0, value = T)
data = switch(dataType,
htseq.counts = read_htseqCounts(files, remove_last))
return(data)
}
x = readTCGA("./RtmpI9X5wD/")
x
View(x)
